#!/usr/bin/perl
#
# DDSquat.pl
# Written and tested on Ubuntu 12.x
# By Kirk Greene <kgreene@directdefense.com>
#
# Copyright 2013 DirectDefense, Inc. All rights reserved.
# http://www.directdefense.com/
# Providing Strategic and Proactive Security Services
# 
#
# Script that is an extension to URLCrazy (by  Andrew Horton -
# http://www.morningstarsecurity.com/research/urlcrazy) that 
# attempts to do some of the leg work/validation after getting
# results of URLCrazy.
#
# The following script was written to automate the validation
# process of results generated by using URLCrazy. The script 
# completes the following tasks:
# 
# 1) Runs a default URLCrazy session agains a provided domain
# 2) Resulting domains that resolve are then:
#	a) Submitted to a Whois check
#	b) Arin lookups are done on the resolved IP address
#	c) Screen captures are then taken of the site
#
# NOTE: You need to supply below the following:
#	1) Your own Snapito API key http://snapito.com/paid-api.jsp
#	2) The path to your URLCrazy
#
# Usage:
#	perl DDSquat.pl <domain>
#
#	Exmaple:
#	perl DDSquat.pl abc.com
#
# End result will be a report file (<domain_ddsquat_rpt.html>) and png 
# images placed within the <domain>_imgs folder of the directory you ran
# the script from. Images will be named after the domain they were taken
# for (ex. abc.com.png) 
#
#	This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#  
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
#
####################################################
# USER VALUE ASSIGNMENTS BELOW
#
#	1) Enter api key below inbetween the quotes ("key")
#		 (ex. $apikey = "okjerngiqwegiqebrwigb")
#	2) Enter your urlcrazy path information if it
#	   is not already in your path.
#
####################################################

$apikey = "";
$urlcrazy_path = ""; # Ex. "/pentest/urlcrazy-x.x/"

####################################################
#	Perl Mods Used
####################################################

use IO::File;

####################################################
#	Initial Checks
####################################################

if ($ARGV[0] eq "") {
	print "You must supply a domain to use!\n";
	print "Usage:\n";
	print "	./DDsquat.pl <domain>\n\n";
	exit;
}

if ($urlcrazy_path eq "") {
	$urlcrazy_chk = system("which urlcrazy");
	if ($urlcrazy_chk !~ m/^\//) {
		print "URLCrazy is not in your path?\n";
		print "Edit the script and place a path in for URLCrazy in there.\n\n";
		exit;
	}
}

############################################################
#	Some initial varaibles	
############################################################
$domain = $ARGV[0];
($domft, $dombk) = split /\./,$domain;
$urlcrazy = $urlcrazy_path . "urlcrazy";
$a = "0"; # check for header row in output
$b = "0"; # switch for whois
$c = "0"; # chk for cazy report table
$d = "0"; # switch for whois html output

############################################################
#	Main
############################################################

run_urlcrazy();
parse_urlcrazy();
screen_capture();
build_html_report();
exit;

#############################################################
# Do ARIN lookups on resolved domains found
#############################################################
sub do_arin {
	foreach $arin_val (keys %arin_info) {
		chomp $arin_val;
		print RPT "<tr>\n<th>$arin_val</th>\n</tr>\n";
		@whois_arin = `whois $arin_info{$arin_val}`;
		print RPT "<tr><td>\n";
		foreach $result_val (@whois_arin) {
			print RPT "$result_val<br>\n";
		}
		print RPT "</td></tr>\n";
	}
}
#############################################################
# Do Whois is lookups on resolved domains found
#############################################################
sub do_whois {

	foreach $found_domain (@typos) {

	    	chomp $found_domain;
		@whois_info = `whois $found_domain`;
		$b = "0";
		print RPT "<tr>\n<th>$found_domain</th>\n</tr>\n";
		
		foreach $who_val (@whois_info) {
			if ( ($who_val =~ m/^Not found:/) || ($who_val =~ m/^No match for/) || ($who_val =~ m/^NOT FOUND/i) ) {
				print RPT "<tr><td>$who_val</td></tr>\n";
				$b = "1";
				} elsif ($who_val =~ m/^WHOIS LIMIT EXCEEDED/) { 
					print RPT "<tr><td>$who_val. Maybe try manually looking this domain up.</td></tr>";
					$b = "1";
				}
			}

		if ($b eq "0") {
			print RPT "<tr><td>";
			foreach $whoisval (@whois_info) {
				print RPT "$whoisval<br>\n";
				}
			print RPT "</td></tr>\n";
		}

	}

}
#############################################################
# Screen Captures of resolved domains
#############################################################
sub screen_capture {
	$imgdir = $domft . "_images";
	system("mkdir $imgdir");

	print "Ok taking some screen captures now of the domains that resolved\n\n";
	
	foreach $screenshot (@typos) {
		chomp $screenshot;
		system("wget http://api.snapito.com/web/$apikey/full/$screenshot?fast -O $imgdir/$screenshot.png");
	}

}

#############################################################
# Parse URLCrazy file
#############################################################
sub parse_urlcrazy {

	$j = new IO::File("tmp_crazy.csv") || die "Couldn't open urlcrazy output file: $!\n";

	while (<$j>){
		chomp $_;
		if ($b eq "1") {
			($TypoType,$Typo,$dnsA,$cc,$CountryA,$dnsMX,$Extn) = split(/,/,$_);
			if ($dnsA =~ /\d+.\d+.\d+.\d+/) {
				$tabledef = "<td>" . $TypoType . "</td><td>" . $Typo . "</td><td>" . $dnsA . "</td><td>" . $cc . "</td><td>" . $CountryA . "</td><td>" . $dnsMX . "</td><td>" . $Extn . "</td>";
				push(@crazyresults,$tabledef);
				push(@typos,$Typo);
				$arin_info{$Typo} = $dnsA;
			}
		} else {
			($TypoType,$Typo,$dnsA,$cc,$CountryA,$dnsMX,$Extn) = split(/,/,$_);
			$tablehead = "<th>" . $TypoType . "</th><th>" . $Typo . "</th><th>" . $dnsA . "</th><th>" . $cc . "</th><th>" . $CountryA . "</th><th>" . $dnsMX . "</th><th>" . $Extn . "</th>";
			push(@crazyresults,$tablehead);
			$b = "1";
		}
	}
	system("rm -f tmp_crazy.csv");
}


#############################################################
# Run URLCrazy
#############################################################
sub run_urlcrazy {

	print "DDsquat.pl\n";
	print "By Kirk Greene <kgreene\@directdefense.com>\n\n";
	print "Public Release Version 1.0 - May 2013\n\n\n";

	print "Running URLCrazy. Hold tight!\n\n";
	if ($urlcrazy_path eq "") {
		system("urlcrazy -f CSV -o tmp_crazy.csv $domain");
	} else {
		system("$urlcrazy -f CSV -o tmp_crazy.csv $domain"); 
	}
}


#############################################################
# Build the HTML Report
#############################################################
sub build_html_report {

	open (RPT,">$domft\_ddsquat\_rpt\.html") or die "Can't open the damn log file??";

	print RPT "<!DOCTYPE html>\n";
	print RPT "<html>\n";
	print RPT "<head>\n";
	print RPT "<title>DDSquat</title>\n";
	print RPT "<meta name=\"version\" content=\"Public Release Version 1.0 - May 2013\">\n";
	print RPT "<meta name=\"tested on\" content=\"Written and tested on Ubuntu 12.x\">\n";
	print RPT "<meta name=\"author\" content=\"By Kirk Greene <kgreene\@directdefense.com>\">\n";
	print RPT "<meta name=\"copyright\" content=\"Copyright 2013 DirectDefense, Inc. All rights reserved.\">\n";
	print RPT "</head>\n";
	print RPT "<body>\n\n";
	
	print RPT "<h1><center>DDSquat Report<br>for $domain</center></h1>\n";
	print RPT "<center>By Kirk Greene at DirectDefense Inc.<br>Public Release Version 1.0 - May 2013</center><br>\n\n";

	# Create Index Table
	print RPT "<p><h2>Contents</h2></p>\n";
	print RPT "<ol><li><a href=\"#Squat\">Potential Squatting Domains</a></li>\n<li><a href=\"#screens\">Screen Captures</a></li>\n<li><a href=\"#whois\">Whois Information</a></li>\n<li><a href=\"#arin\">ARIN Information</a></li></ol>\n";

	# Potentail Squatting Domain Table
	print RPT "<p><h2><a id=\"Squat\">1. Potential Squatting Domains</a></h2></p>\n";
	print RPT "<table border=\"1\">\n";
	print RPT "<tr>\n";	
	print RPT "$crazyresults[0]\n";
	print RPT "</tr>\n";
	foreach $row (@crazyresults) {
		if ($c eq 1) {
			print RPT "<tr>";
			print RPT "$row\n";
			print RPT "</tr>";
		} else {
			$c = "1";
		} 
	}
	print RPT "</table>";

	# Screen Captures
	print RPT "<p><h2><a id=\"screens\">2. Screen Captures</a></h2></p>\n";
	print RPT "<table border=\"1\">\n";
	foreach $imgfile (@typos) {
		print RPT "<tr>\n<th>$imgfile</th>\n</<tr>\n";
		print RPT "<tr>\n<td><img src=\"$imgdir/$imgfile.png\"></td>\n</tr>";
	}
	print RPT "</table>";

	# Whois Information
	print RPT "<p><h2><a id=\"whois\">3. Whois Information</a></h2></p>\n";
	print RPT "<table border=\"1\">\n";
	do_whois();
	print RPT "</table>";

	# ARIN Information
	print RPT "<p><h2><a id=\"arin\">4. ARIN Information</a></h2></p>\n";
	print RPT "<table border=\"1\">\n";
	do_arin();
	print RPT "</table>";

	print RPT "</html>\n";
	print RPT "</body>\n";

	print "\n\nThanks for playing!!\n\n";

	close (RPT);

}

